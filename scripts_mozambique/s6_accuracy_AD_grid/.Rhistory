####################################################################################################
####################################################################################################
## SETUP ALL ENVIRONMENT, PACKAGES AND PARAMETERS
## Contact remi.dannunzio@fao.org
## 2017/11/02
####################################################################################################
####################################################################################################
options(stringsAsFactors = FALSE)
#############################################################
### Load necessary packages
#install.packages("gfcanalysis")
library(gfcanalysis)
library(rgeos)
library(ggplot2)
library(rgdal)
library(dplyr)
#############################################################
### WORK ENVIRONMENT
clone_dir   <- "/media/dannunzio/OSDisk/Users/dannunzio/Documents/countries/mozambique/"
datadir   <- paste0(clone_dir,"data/")
scriptdir <- paste0(clone_dir,"scripts_mozambique/")
limit_dir <- paste0(datadir,"boundaries/")
class_dir <- paste0(datadir,"classification/")
mosaicdir <- paste0(datadir,"satellite_mosaic/")
esa_dir  <- paste0(datadir,"esa_data/")
gfc_dir  <- paste0(datadir,"gfc_data/")
seg_dir  <- paste0(datadir,"segments/")
res_dir  <- paste0(datadir,"results/")
esa <- paste0(esa_dir,"esa_cci_moz.tif")
gtc <- paste0(gfc_dir,"gfc_moz_treecover2000.tif")
gly <- paste0(gfc_dir,"gfc_moz_lossyear.tif")
ggn <- paste0(gfc_dir,"gfc_moz_gain.tif")
dir.create(datadir,showWarnings = F)
dir.create(limit_dir,showWarnings = F)
dir.create(class_dir,showWarnings = F)
dir.create(mosaicdir,showWarnings = F)
dir.create(esa_dir,showWarnings = F)
dir.create(gfc_dir,showWarnings = F)
dir.create(seg_dir,showWarnings = F)
dir.create(res_dir,showWarnings = F)
####################################################################################################
####################################################################################################
## LOCAL PARAMETERS FOR THE PROCESS
####################################################################################################
####################################################################################################
### LOCATION AND NAME OF SUPERVISED CLASSIFICATION
downclassdir <- paste0(rootdir,"downloads/classif_zambezia_lsat_train_520_poly_wetperiod/")
classif_name <- "classification_20171101.tif"
### LOCATION AND NAME OF SATELLITE MOSAIC FOR SEGMENTATION
downmosaidir <- paste0(rootdir,"downloads/zambezia_lsat_dry_20171102/")
mosaic_name  <- "lsat_2016_zambezia.tif"
### TREE COVER THRESHOLD FOR GRC PRODUCT
gfc_threshold <- 30
### CREATE A PSEUDO COLOR TABLE
my_classes <- c(11,12,13,21,22,23,24,25,26,31,32,33,41,42,43,44,45,51,61,62,63)
my_colors  <- col2rgb(c("brown","yellow","yellow", # agriculture
"lightgreen","lightgreen","purple","darkgreen","purple2","green", # forest
"orange","green1","green2", # grassland
"paleturquoise2","paleturquoise3","darkblue","darkblue","grey", # wetland
"darkred", # urban
"grey1","grey2","grey3" # other
))
#colors()
adg_dir  <- paste0(datadir,"ad_grid/")
dir.create(adg_dir,showWarnings = F)
system(sprintf("getwd %s -O %s",
"https://www.dropbox.com/s/4tvrqvwka48qg6u/Mozambique_AD_ALL_2.csv?dl=0",
adg_dir))
system(sprintf("wget %s -O %s",
"https://www.dropbox.com/s/4tvrqvwka48qg6u/Mozambique_AD_ALL_2.csv?dl=0",
adg_dir))
system(sprintf("wget %s -O %s",
"https://www.dropbox.com/s/4tvrqvwka48qg6u/Mozambique_AD_ALL_2.csv?dl=0",
paste0(adg_dir,"ad_grid.csv")
))
ad <- read.csv(paste0(adg_dir,"ad_grid.csv"),encoding = "UTF-8")
df <- ad
names(df)
df <- df[!is.na(df$location_y),]
summary(df)
spdf <- SpatialPointsDataFrame(coords = df[,c("location_x","location_y")],
data   = df,
proj4string = CRS("+init=epsg:4326"))
moz <- getData('GADM',path=limit_dir, country= "MOZ", level=2)
proj4string(moz) <- proj4string(spdf)
test <- over(spdf,moz)
spdf@data$region_1 <- test$NAME_1
spdf@data$region_2 <- test$NAME_2
df <- spdf@data
table(df$lulc_nivel2_label,df$region_1)
codes <- read.csv(paste0(data_dir,"code_list_lc.csv"))
codes <- read.csv(paste0(datadir,"code_list_lc.csv"))
codes
names(df)
names(code)
codes <- read.csv(paste0(datadir,"code_list_lc.csv"))
names(code)
names(codes)
names(codes)[names(code) %in% names(df)]
names(codes)[names(codes) %in% names(df)]
ad    <- read.csv(paste0(adg_dir,"ad_grid.csv"),encoding = "UTF-8")
df <- merge(ad,
codes[,c("nivel1_code","nivel2_code","nivel3_code","nivel3_label_pt","code_l2","code_l3")],
by.x="lulc_nivel3",
by.y="nivel3_code",
all.x=T)
spdf <- SpatialPointsDataFrame(coords = df[,c("location_x","location_y")],
data   = df,
proj4string = CRS("+init=epsg:4326"))
moz <- getData('GADM',path=limit_dir, country= "MOZ", level=2)
proj4string(moz) <- proj4string(spdf)
test <-
spdf@data$region_1 <- over(spdf,moz)$NAME_1
spdf@data$region_2 <- over(spdf,moz)$NAME_2
test <- extract(x = raster(paste0(res_dir,"spc_segmode.tif")),
y= spdf)
test <- extract(x = raster(paste0(res_dir,"spc_segmode.tif")),
y= spdf)
spdf@data$map_code <- extract(x = raster(paste0(res_dir,"spc_segmode.tif")),
y= spdf)
table(spdf$map_code)
ad_grid <- paste0(ad_grid,"Mozambique_AD_ALL_1.csv")
ad_grid <- paste0(adg_dir,"Mozambique_AD_ALL_1.csv")
ad    <- read.csv(ad_grid,encoding = "UTF-8")
ad    <- read.csv(ad_grid,encoding = "UTF-8")
res_segmode <- paste0(res_dir,"spc_segmode.tif")
res_dectree <- paste0(res_dir,"decision_tree.tif")
system(sprintf("oft-stat %s %s %s",
res_segmode
))
system(sprintf("oft-stat %s ",
res_segmode
))
the_result <- res_segmode
system(sprintf("oft-stat -i %s -o %s -um %s -nostd",
the_result,
paste0(res_dir,"map_area.txt"),
the_result
))
df <- spdf@data
df <- merge(spdf@data,
codes[,c("nivel2_code","code_l2")],
by.x="map_code",
by.y="nivel2_code",
all.x=T)
names(df)
df <- merge(spdf@data,
codes[,c("nivel2_code","code_l2")],
by.x="map_code",
by.y="code_l2",
all.x=T)
names(df)
merge_code <- codes[,c("nivel2_code","code_l2")]
names(merge_code) <- c("map_class","map_code")
df <- merge(spdf@data,
codes[,c("nivel2_code","code_l2")],
by.x="map_code",
by.y="map_code",
all.x=T)
merge_code <- codes[,c("nivel2_code","code_l2")]
names(merge_code) <- c("map_class","map_code")
df <- merge(spdf@data,
merge_code,
by.x="map_code",
by.y="map_code",
all.x=T)
names(df)
ref_code <- "nivel2_lulc"
tmp <- as.matrix(table(df[,map_code,],df[,ref_code]))
map_code <- "map_class"
ref_code <- "nivel2_lulc"
tmp <- as.matrix(table(df[,map_code,],df[,ref_code]))
names(df)
ref_code <- "nivel2_code"
names(df)
tmp <- as.matrix(table(df[,map_code,],df[,ref_code]))
tmp[is.na(tmp)]<- 0
legend <- levels(as.factor(df[,ref_code]))
matrix<-matrix(0,nrow=length(legend),ncol=length(legend))
for(i in 1:length(legend)){
tryCatch({
cat(paste(legend[i],"\n"))
matrix[,i]<-tmp[,legend[i]]
}, error=function(e){cat("Not relevant\n")}
)
}
matrix
legend
df <- merge(spdf@data,
merge_code,
by.x="map_code",
by.y="map_code",
all.x=T)
df <- spdf@data
####################################################################################
####### Object:  Use AD grid results as reference data for accuracy assessment
####### Author:  remi.dannunzio@fao.org
####### Update:  2017/11/06
####################################################################################
the_result <- res_segmode
##### READ AD GRID RESULTS AND CODE TABLE TO MERGE
ad    <- read.csv(ad_grid,encoding = "UTF-8")
codes <- read.csv(paste0(datadir,"code_list_lc.csv"))
df <- merge(ad,
codes[,c("nivel1_code","nivel2_code","nivel3_code","nivel3_label_pt","code_l2","code_l3")],
by.x="lulc_nivel3",
by.y="nivel3_code",
all.x=T)
##### SPATIALIZE POINTS
spdf <- SpatialPointsDataFrame(coords = df[,c("location_x","location_y")],
data   = df,
proj4string = CRS("+init=epsg:4326"))
##### INTERSECT WITH ADMINISTRATIVE BOUNDARIES
moz <- getData('GADM',path=limit_dir, country= "MOZ", level=2)
proj4string(moz) <- proj4string(spdf)
spdf@data$region_1 <- over(spdf,moz)$NAME_1
spdf@data$region_2 <- over(spdf,moz)$NAME_2
##### INTERSECT WITH LAND USE LAND COVER MAP
spdf@data$map_code <- extract(x = raster(the_result),
y= spdf)
table(spdf$map_code)
merge_code <- codes[,c("nivel2_code","code_l2")]
names(merge_code) <- c("map_class","map_code")
df <- merge(spdf@data,
merge_code,
by.x="map_code",
by.y="map_code",
all.x=T)
